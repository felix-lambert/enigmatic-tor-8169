{
  "name": "mongoose-autopopulate",
  "version": "0.1.0",
  "description": "Always populate() certain fields in your mongoose schemas",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha ./test/unit.js",
    "test-all": "./node_modules/mocha/bin/mocha ./test/*.js",
    "test-integration": "./node_modules/mocha/bin/mocha ./test/integration.js",
    "test-travis": "./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha -- -R spec ./test/*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/vkarpov15/mongoose-autopopulate.git"
  },
  "keywords": [
    "mongoose",
    "populate",
    "autopopulate",
    "mongodb"
  ],
  "devDependencies": {
    "acquit": "0.0.3",
    "istanbul": "0.3.2",
    "mocha": "2.1.0",
    "mongoose": "4.0.0-rc2",
    "underscore": "1.5.2"
  },
  "peerDependencies": {
    "mongoose": ">= 4.0.0-rc0"
  },
  "author": {
    "name": "Valeri Karpov",
    "email": "val@karpov.io"
  },
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/vkarpov15/mongoose-autopopulate/issues"
  },
  "homepage": "https://github.com/vkarpov15/mongoose-autopopulate",
  "readme": "# mongoose-autopopulate\n\nAlways `populate()` certain fields in your mongoose schemas\n\n[![Build Status](https://travis-ci.org/vkarpov15/mongoose-autopopulate.svg?branch=master)](https://travis-ci.org/vkarpov15/mongoose-autopopulate)\n[![Coverage Status](https://coveralls.io/repos/vkarpov15/mongoose-autopopulate/badge.svg?branch=master)](https://coveralls.io/r/vkarpov15/mongoose-autopopulate?branch=master)\n\n**Note:** This plugin will *only* work with mongoose >= 4.0. Do NOT use\nthis plugin with mongoose 3.x. You have been warned.\n\n**Note:** population is a powerful feature, but it has limitations and\nhelps you get away with poor schema design.  In particular, it is usually\nbad MongoDB schema design to include arrays that grow without bound in\nyour documents. Do not include a constantly-growing array of ObjectIds\nin your schema - your data will become unwieldy as the array grows and\nyou will eventually hit the [16mb document size limit](http://docs.mongodb.org/manual/reference/limits/#BSON-Document-Size).\nIn general, think carefully when designing your schemas.\n\n# API\n\nThe `mongoose-autopopulate` module exposes a single function that you can\npass to the `mongoose.Schema.prototype.plugin()` function. Below you will\nsee how to use this function.\n\nSuppose you have two collections, \"people\" and \"bands\". The `People` model\nlooks like this:\n\n```javascript\nvar personSchema = new Schema({ name: String, birthName: String });\nPerson = mongoose.model('people', personSchema, 'people');\n```\n\nSuppose your \"people\" collection has one document:\n\n```javascript\n{\n  name: 'Axl Rose',\n  birthName: 'William Bruce Rose, Jr.',\n  _id: '54ef3f374849dcaa649a3abc'\n};\n```\n\nAnd your \"bands\" collection has one document:\n\n```javascript\n{\n  _id: '54ef3f374849dcaa649a3abd',\n  name: \"Guns N' Roses\",\n  lead: '54ef3f374849dcaa649a3abc',\n}\n```\n\n\n#### It supports an autopopulate option in schemas\n\n\nYou can set the `autopopulate` option for the `lead` field.\nThis means that, every time you call `find()` or `findOne()`,\n`mongoose-autopopulate` will automatically call `.populate('lead')`\nfor you.\n\n\n```javascript\n    \n    var bandSchema = new Schema({\n      name: String,\n      lead: { type: ObjectId, ref: 'people', autopopulate: true }\n    });\n    bandSchema.plugin(autopopulate);\n\n    var Band = mongoose.model('band3', bandSchema, 'bands');\n    Band.findOne({ name: \"Guns N' Roses\" }, function(error, doc) {\n      assert.ifError(error);\n      assert.equal('Axl Rose', doc.lead.name);\n      assert.equal('William Bruce Rose, Jr.', doc.lead.birthName);\n      done();\n    });\n  \n```\n\n#### It can specify an options argument\n\n\nAdvanced users of `populate()` may want to specify additional\noptions, such as selecting fields. If you set the `autopopulate`\noption to an object, `mongoose-autopopulate` will merge the object\ninto populate options. The `findOne()` below is equivalent to\n`Band.findOne({ name: \"Guns N' Roses\" }).populate({ path: 'lead', select: 'name });`\n\n\n```javascript\n    \n    var bandSchema = new Schema({\n      name: String,\n      lead: { type: ObjectId, ref: 'people', autopopulate: { select: 'name' } }\n    });\n    bandSchema.plugin(autopopulate);\n\n    var Band = mongoose.model('band2', bandSchema, 'bands');\n    Band.findOne({ name: \"Guns N' Roses\" }, function(error, doc) {\n      assert.ifError(error);\n      assert.equal('Axl Rose', doc.lead.name);\n      assert.ok(!doc.lead.birthName);\n      done();\n    });\n  \n```\n\n#### It can specify a function that returns options\n\n\nYou can also set the `autopopulate` option to be a function.\nThen `mongoose-autopopulate` will call the function with\nthe query object as the context and use the return value.\nThe below `populate()` uses the same options as the previous\nexample.\n\n\n```javascript\n    \n    var numCalls = 0;\n    var optionsFunction = function() {\n      ++numCalls;\n      return { select: 'name' };\n    };\n\n    var bandSchema = new Schema({\n      name: String,\n      lead: { type: ObjectId, ref: 'people', autopopulate: optionsFunction }\n    });\n    bandSchema.plugin(autopopulate);\n\n    var Band = mongoose.model('band4', bandSchema, 'bands');\n    Band.find({ name: \"Guns N' Roses\" }, function(error, docs) {\n      assert.ifError(error);\n      assert.equal(1, docs.length);\n      assert.equal(1, numCalls);\n      var doc = docs[0];\n      assert.equal('Axl Rose', doc.lead.name);\n      assert.ok(!doc.lead.birthName);\n      done();\n    });\n  \n```\n\n",
  "readmeFilename": "README.md",
  "_id": "mongoose-autopopulate@0.1.0",
  "_from": "mongoose-autopopulate@"
}
